import java.util.ArrayList;

public class View {
    public final String MENU_CHOOSE_MSG = "Choose a number: ";
    public final String MENU_MSG = ("1. Run sequential algorithm\n" +
            "2. Run parallel algorithm\n" +
            "3. Run both and compare\n" +
            "4. Exit\n\n");
    public final String SUBMENU_MSG = ("1. Enter custom values\n" +
            "2. Generate values\n\n");
    public final String INVALID_OPTION_MSG = "Invalid option\n";
    public final String VALUES_MANUAL_ENTER_MSG = "Enter amount of items(0 < N <= 20): ";
    public final String VALUES_AUTOGENERATED_ENTER_MSG = "Enter amount of items(N > 0): ";
    public final String VALUES_AUTOTEST_ENTER_MSG = "Enter max amount of items for the test(N > 0): ";
    public final String MAX_CAPACITY_ENTER_MSG = "Enter max weight you can take: ";
    // public final String VALUES_TEST_ENTER_MSG = "Enter amount of items(N > 0): ";
    public final String THREAD_NUMBER_ENTER_MSG = "Enter amount of threads to procces the algorithm(TN > 0): ";
    public final String WORTH_ENTER_MSG = "Enter corresponding values of the items: ";
    public final String WEIGHTS_ENTER_MSG = "Enter corresponding weights of the items: ";
    public final String MAX_VALUE_RESULT_MSG = "Max value possible is ";
    public final String ITEMS_USED_MSG = "Following items were used: ";
    public final String STEP_EXECUTING_MSG = "Calculating a test batch with the size of ";
    public final String EXECUTION_TIME_MSG = "Execution time is ";
    public final String SPEEDUP_MSG = "Speedup realtive to the sequential algorithm is ";
    public final String TESTS_OK_MSG = "All of the tests are correct!\n";
    public final String TESTS_FAILURE_MSG = "Some of the tests aren't correct!\n";
    public final String SOLVER_USED_MSG = "The solver being used for the following tests is ";
    public final String TRY_AGAIN_MSG = "Input is incorrect. Try again!\n";

    public void printMessage(String message) {
        System.out.print(message);
    }

    public void printBlankLine() {
        System.out.print("\n");
    }

    public void printTestSolutions(ArrayList<ArrayList<KnapsackSolution>> testSolutions, int maxItemNumber) {
        for (int i = 0; i < testSolutions.size(); i++) {
            ArrayList<KnapsackSolution> solutionsSet = testSolutions.get(i);
            System.out.println(SOLVER_USED_MSG + solutionsSet.get(0).getSolverUsed().toString());
            for (int j = 0; j < solutionsSet.size(); j++) {
                System.out.println(STEP_EXECUTING_MSG + ((j + 1) * maxItemNumber));
                System.out.println(EXECUTION_TIME_MSG + (solutionsSet.get(j).getTimeElapsed()) + " seconds");
                if (i > 0) {
                    System.out.println(SPEEDUP_MSG
                            + solutionsSet.get(j).getTimeElapsed() / testSolutions.get(0).get(j).getTimeElapsed());
                }
            }
        }
    }

    public void printExecutionStatus(KnapsackSolver solver) {
        System.out.println("The solver " + solver.toString() + " has finished its execution!");
    }

    public void printSolution(KnapsackSolution solution) {
        System.out.println(MAX_VALUE_RESULT_MSG + solution.getMaxWorth());
        System.out.println(MAX_VALUE_RESULT_MSG);
        int[] itemsUsed = solution.getItemsUsed();
        for (int i = 0; i < itemsUsed.length; i++) {
            System.out.print(itemsUsed[i] + " ");
        }
        System.out.println();
        System.out.println(EXECUTION_TIME_MSG + solution.getTimeElapsed() + " seconds");
    }
}
